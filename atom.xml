<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>MyBlog</title>
  
  <subtitle>心有猛虎 细嗅蔷薇</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://github.com/liu119631/"/>
  <updated>2018-01-24T16:08:41.861Z</updated>
  <id>https://github.com/liu119631/</id>
  
  <author>
    <name>刘鹏飞</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>利用Initializr来快速构建SpringBoot工程</title>
    <link href="https://github.com/liu119631/2018/01/24/%E5%88%A9%E7%94%A8Initializr%E5%BF%AB%E9%80%9F%E6%9E%84%E5%BB%BASpringBoot%E5%B7%A5%E7%A8%8B/"/>
    <id>https://github.com/liu119631/2018/01/24/利用Initializr快速构建SpringBoot工程/</id>
    <published>2018-01-24T14:56:56.000Z</published>
    <updated>2018-01-24T16:08:41.861Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>New—Project 可以看到图所示的创建功能窗口。其中Initial Service Url指向的地址就是Spring官方提供的Spring Initializr工具地址，所以这里创建的工程实际上也是基于它的Web工具来实现的,也可以将此地址copy到浏览器上试一下,会生成spring boot的项目工程下载</p></blockquote><p><img src="/img/使用Intellij中的Spring Initializr来快速构建Spring Boot工程/01.jpg" alt=""></p><blockquote><p>Next,下图可以看到可以编辑我们所创建的工程信息,type类型,language语言等等..</p></blockquote><p><img src="/img/使用Intellij中的Spring Initializr来快速构建Spring Boot工程/02.jpg" alt=""></p><blockquote><p>Next,在这一步我们可以选择可以依赖的包,平时常用的web,模板引擎,数据库等等如图所示,在此我选择了web,thymeleaf,mysql依赖,创建完成后检查pom.xml文件可以发现依赖都已创建完成~</p></blockquote><p><img src="/img/使用Intellij中的Spring Initializr来快速构建Spring Boot工程/03.jpg" alt=""></p><blockquote><p>Next~　这里为项目的物理路径</p></blockquote><p><img src="/img/使用Intellij中的Spring Initializr来快速构建Spring Boot工程/04.jpg" alt=""></p><blockquote><p>Finish 创建完成目录结构如下:</p></blockquote><p><img src="/img/使用Intellij中的Spring Initializr来快速构建Spring Boot工程/02.jpg" alt=""></p><blockquote><p>　附:</p></blockquote><p>如上图所示,springboot的基础结构共三块,</p><p>　　　　1.src/main/java：DemoApplication，可以通过直接运行该类来启动 Spring Boot应用</p><p>　　　　2.src/main/resources：配置目录，该目录用来存放应用的一些配置信息，比如应用名、服务端口、数据库配置等。由于我们应用了Web模块，因此产生了 　　　　　　static目录与templates目录，前者用于存放静态资源，如图片、CSS、JavaScript等；后者用于存放Web页面的模板文件。</p><p>　　　　3.src/test：单元测试目录，生成的 DemoApplicationTests 通过 JUnit4实现，可以直接用运行 Spring Boot应用的测试。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;New—Project 可以看到图所示的创建功能窗口。其中Initial Service Url指向的地址就是Spring官方提供的Spring Initializr工具地址，所以这里创建的工程实际上也是基于它的Web工具来实现的,也可以将此地址c
      
    
    </summary>
    
      <category term="-Java" scheme="https://github.com/liu119631/categories/Java/"/>
    
    
      <category term="-Java-SpringBoot" scheme="https://github.com/liu119631/tags/Java-SpringBoot/"/>
    
  </entry>
  
</feed>
